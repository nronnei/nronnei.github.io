<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nick Ronnei</title>
  <subtitle>Thoughts, experiments, and advice for FOSS GIScience</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nronnei.github.io/"/>
  <updated>2017-05-01T20:13:36.657Z</updated>
  <id>https://nronnei.github.io/</id>
  
  <author>
    <name>Nick Ronnei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Calculating Slope on a Tiled Dataset, Part 1</title>
    <link href="https://nronnei.github.io/blog/2017/04/calculating-slope-on-tiled-data/"/>
    <id>https://nronnei.github.io/blog/2017/04/calculating-slope-on-tiled-data/</id>
    <published>2017-04-07T19:21:04.000Z</published>
    <updated>2017-05-01T20:13:36.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>PostGIS supplies us with a nice function, <code>ST_Slope</code>, that quickly calculated slope from a DEM. However, we can’t calculate slope at the edge of a raster, because we need neighboring pixels on all sides of our targeted pixel to calculate its slope. With tiled rasters, I think we can expect to encounter this problem frequently.</p>
<p>This post is all about testing how PostGIS responds to that problem.</p>
<h2 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h2><p>This post is just an initial examination of what happens when we calculate slope on a tiled DEM.</p>
<p><strong>My hypothesis: we’ll see edge effects at every tile boundary unless we use <code>ST_Union</code>.</strong></p>
<p>If this is the case, then we have to turn our minds to solving the problem. One way that jumps to mind initially would be to tile the DEM at a resolution that would work for the output</p>
<p>Let’s see what really happens!</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h4 id="The-Data"><a href="#The-Data" class="headerlink" title="The Data"></a>The Data</h4><p>I’ll be using ASTER GDEM v2* for this test. If you’d like to follow along you will need an actual DEM since we’re calculating slope, rather than the simulation approach I’ve encouraged in some of my <a href="/blog/tags/intro-to-postgis">other posts</a>. You can use the same data I’m using by downloading it from <a href="http://gdex.cr.usgs.gov/gdex/" target="_blank" rel="external">LDAAC GDEx</a> or <a href="http://reverb.echo.nasa.gov/reverb/" target="_blank" rel="external">NASA Reverb</a> after creating a free account. J-spacesystems used to distribute it as well, though <a href="http://www.jspacesystems.or.jp/en_/archives/116" target="_blank" rel="external">they ceased doing so</a> in 2016. I highly recommend Reverb, and there’s a good guide on how to download it <a href="http://gis.stackexchange.com/a/17999/37341" target="_blank" rel="external">here.</a></p>
<p>If you’re not familiar with ASTER GDEM, it’s supposed to be the higher-resolution successor to SRTM. However, there are many issues with the data. I’ve written about some of them if you’d like to learn more.</p>
<h4 id="Pick-an-Area"><a href="#Pick-an-Area" class="headerlink" title="Pick an Area"></a>Pick an Area</h4><p>I’ve got GDEM v2 for most of the globe, so I’m going to select a subset of the data. It doesn’t really matter where, but I want something with some interesting topography. I tiled GDEM at 100x100 when I pulled it in, so we won’t need to do that.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- New table for new data</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.dem_foco_100 (</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- Select an area within 30km of downtown Fort Collins</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dem_foco_100(rast)</div><div class="line"><span class="keyword">SELECT</span> rast</div><div class="line"><span class="keyword">FROM</span> gdem_100</div><div class="line"><span class="keyword">WHERE</span> ST_Intersects(</div><div class="line">  ST_Envelope(rast)  <span class="comment">-- Raster tile bounding box</span></div><div class="line">, ST_Envelope(       <span class="comment">-- Get a bouding box</span></div><div class="line">    ST_Buffer(       <span class="comment">-- Of a buffer</span></div><div class="line">      ST_SetSRID(    <span class="comment">-- Of a point in downtown FOCO</span></div><div class="line">        ST_MakePoint(<span class="number">-105.085670</span>, <span class="number">40.572171</span>)</div><div class="line">        , <span class="number">4326</span>)::geography  <span class="comment">-- Note the use of the geography type</span></div><div class="line">      , <span class="number">30000</span>)::geometry)   <span class="comment">-- The buffer radius is 10,000m. We</span></div><div class="line">                            <span class="comment">-- convert back to geom to get BB.</span></div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- Constrain and index rasters to improve query speed</span></div><div class="line"><span class="keyword">SELECT</span> AddRasterConstraints(</div><div class="line">  <span class="string">'foco_dem_100'</span>::<span class="keyword">name</span>,  <span class="comment">-- table</span></div><div class="line">  <span class="string">'rast'</span>::<span class="keyword">name</span>  <span class="comment">-- raster geometry column</span></div><div class="line">);</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> foco_dem_100_gist_idx</div><div class="line"><span class="keyword">ON</span> foco_dem_100</div><div class="line"><span class="keyword">USING</span> GIST(ST_ConvexHull(rast));</div></pre></td></tr></table></figure>
<p>This query selects a the area around Fort Collins, Colorado, USA. Specifically, I’ve selected all raster tiles that intersect the bounding box of a 30km buffer around Colorado State University.</p>
<img src="/blog/2017/04/calculating-slope-on-tiled-data/data-overview.png" alt="Our initial data." title="Our initial data.">
<p><a href="./data-overview.png" target="_blank">View full size</a></p>
<p>Notice that I used the <code>geography</code> type in the query above. I did this so I could specify my buffer length in meters, rather than degrees. Using the <code>geography</code> variant of <code>ST_Buffer</code> (<a href="http://www.postgis.org/docs/ST_Buffer.html" target="_blank" rel="external">the final variant listed here</a>) of the function, as the docs explain, can cause some problem with geometries that cover large areas, but I think it’s worth the convenience in this case.</p>
<h2 id="Hit-the-Slopes"><a href="#Hit-the-Slopes" class="headerlink" title="Hit the Slopes"></a>Hit the Slopes</h2><h4 id="First-Attempt"><a href="#First-Attempt" class="headerlink" title="First Attempt"></a>First Attempt</h4><p>Alright, with our subset selected, let’s try out the operation and see what we get. Here, we’ll get the slope for a 10km area around CSU.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.slope_foco_100 (</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> slope_foco_100(rast)</div><div class="line"><span class="keyword">SELECT</span> ST_Slope(</div><div class="line">  rast,</div><div class="line">  <span class="number">1</span>,              <span class="comment">-- Band</span></div><div class="line">  <span class="string">'32BF'</span>,         <span class="comment">-- Pixel Type</span></div><div class="line">  <span class="string">'DEGRESS'</span>,      <span class="comment">-- Slope units</span></div><div class="line">  <span class="number">111120</span>,         <span class="comment">-- Scale (convert Lon/Lat to Meters)</span></div><div class="line">  <span class="literal">FALSE</span>::<span class="built_in">boolean</span>  <span class="comment">-- Interpolate nodata?</span></div><div class="line">)</div><div class="line"><span class="keyword">FROM</span> dem_foco_100</div><div class="line"><span class="keyword">WHERE</span> ST_Intersects(</div><div class="line">  ST_Envelope(rast)</div><div class="line">, ST_Envelope(</div><div class="line">    ST_Buffer(ST_SetSRID(ST_MakePoint(<span class="number">-105.085670</span>, <span class="number">40.572171</span>), <span class="number">4326</span>)::geography</div><div class="line">      , <span class="number">10000</span>)::geometry)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Okay, time to pop over to QGIS and see what we’ve got!</p>
<img src="/blog/2017/04/calculating-slope-on-tiled-data/with-edge-effects.png" alt="Calculating slope on a tiled DEM leaves edge effects." title="Calculating slope on a tiled DEM leaves edge effects.">
<p><a href="./with-edge-effects.png" target="_blank">View full size</a></p>
<p>Well, shoot. See the weird grid that shows up in the slope area? Looks like we have edge effects.</p>
<p>I’d expected that, but you can always hope you’re wrong about these kind of things! Let’s figure out what we can do about it.</p>
<h4 id="Second-Attempt"><a href="#Second-Attempt" class="headerlink" title="Second Attempt"></a>Second Attempt</h4><p>Since we’re having trouble with the edge effects, one thing we can do is get rid of the edges.</p>
<p>Using <code>ST_Union</code>, we can combine all the tiles into a single raster befoe we calculate slope on it. This way, we will only have problems at the very edge of our study area where they’re not as impactful.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.slope_good_100 (</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> slope_good_100(rast)</div><div class="line"><span class="keyword">SELECT</span> ST_Slope(ST_Union(rast), <span class="number">1</span>, <span class="string">'32BF'</span>, <span class="string">'DEGRESS'</span>, <span class="number">111120</span>, <span class="literal">FALSE</span>)</div><div class="line"><span class="keyword">FROM</span> dem_foco_100</div><div class="line"><span class="keyword">WHERE</span> ST_Intersects(</div><div class="line">  ST_Envelope(rast)</div><div class="line">, ST_Envelope(</div><div class="line">    ST_Buffer(ST_SetSRID(ST_MakePoint(<span class="number">-105.085670</span>, <span class="number">40.572171</span>), <span class="number">4326</span>)::geography</div><div class="line">      , <span class="number">10000</span>)::geometry)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Back in QGIS, we can see that the this time around, we don’t have the weird grid! Hooray!</p>
<img src="/blog/2017/04/calculating-slope-on-tiled-data/without-edge-effects.png" alt="Using ST_Union on a tiled DEM before calculating slope reduces edge effects." title="Using ST_Union on a tiled DEM before calculating slope reduces edge effects.">
<p><a href="./without-edge-effects.png" target="_blank">View full size</a></p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>We can easily avoid the problems created when calculating slope on a tiled DEM with the powers of ST_Union. Great news! Proceed with your analysis. In fact, <a href="./calculating-slope-on-tiled-data.sql">download the code</a> from this post as a guide to help you!</p>
<p>But what if you need to get the slope for an extremely large area, like, say, the whole world? You can’t just <code>SELECT ST_Union(rast)</code> the entire globe, it’s too much data! We’d need a way to work through it bit by bit, calculating slope one tile at a time.</p>
<p>I face that exact problem in my thesis research. I’m working on a blog post about it now. Stay tuned for more! I’ll update this post with a link when I finish it.</p>
<p>*ASTER GDEM is a product of METI and NASA.</p>
]]></content>
    
    <summary type="html">
    
      Today we&#39;ll examine the implications of calculating slope on a tiled DEM.
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgis" scheme="https://nronnei.github.io/blog/tags/postgis/"/>
    
      <category term="sql" scheme="https://nronnei.github.io/blog/tags/sql/"/>
    
      <category term="raster" scheme="https://nronnei.github.io/blog/tags/raster/"/>
    
      <category term="raster math series" scheme="https://nronnei.github.io/blog/tags/raster-math-series/"/>
    
  </entry>
  
  <entry>
    <title>Passing Arguments to Map Algebra Callbacks</title>
    <link href="https://nronnei.github.io/blog/2017/03/passing-arguments-to-map-algebra-callbacks/"/>
    <id>https://nronnei.github.io/blog/2017/03/passing-arguments-to-map-algebra-callbacks/</id>
    <published>2017-03-31T00:00:00.000Z</published>
    <updated>2017-04-04T13:55:59.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>The docs say that we can pass additional arguments to ST_MapAlgebra callbacks, but how do we actually do that?</p>
<p>In this post, I’ll show you how to pass additional arguments (the <code>VARIADIC</code> arguments referred to by the text array called <code>userargs</code> in <a href="http://postgis.net/docs/RT_ST_MapAlgebra.html" target="_blank" rel="external">the documentation</a>) to <code>ST_MapAlgebra</code> callbacks in PostGIS.</p>
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>I had some problems with this while I was writing <a href="/blog/2017/03/creating-rasters-from-scratch-in-postgis-pt3/">my post</a> on simulating multi-band rasters, and the docs leave something to be desired.</p>
<p>I ended up <a href="http://gis.stackexchange.com/questions/234053/passing-additional-arguments-to-st-mapalgebra-callback" target="_blank" rel="external">asking</a> about it on <a href="https://gis.stackexchange.com/" target="_blank" rel="external">GIS Stack Exchange</a>, and this post is my attempt to boost that answer.</p>
<h2 id="The-Answer"><a href="#The-Answer" class="headerlink" title="The Answer"></a>The Answer</h2><p>Thanks to <a href="http://geospatialelucubrations.blogspot.com/" target="_blank" rel="external">Pierre Racine</a>, one of the creators of PostGIS, we have the answer! As he demonstrates in this example:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ST_MapAlgebra(b1.rast, <span class="comment">-- raster to operate on</span></div><div class="line">              1, <span class="comment">-- band</span></div><div class="line">              'generate_random_raster(double precision[], integer[], text[])'::regprocedure, <span class="comment">-- custom function signature</span></div><div class="line">              pixeltype, <span class="comment">-- can be null</span></div><div class="line">              extenttype, <span class="comment">-- can be null</span></div><div class="line">              customextent, <span class="comment">-- can be null</span></div><div class="line">              distancex, <span class="comment">-- can be null</span></div><div class="line">              distancey, <span class="comment">-- can be null</span></div><div class="line">              firstextraargument,</div><div class="line">              secondextraargument,</div><div class="line">              ...</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>Here’s how it looks in my use case:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">  ST_AddBand(b1.rast,  <span class="comment">-- torast</span></div><div class="line">    ST_MapAlgebra(b1.rast,</div><div class="line">      <span class="number">1</span>,</div><div class="line">      <span class="string">'generate_random_int_raster(double precision[][][], integer[][], text[])'</span>::regprocedure,</div><div class="line">      <span class="string">'8BUI'</span>::<span class="built_in">text</span>,  <span class="comment">--pixeltype</span></div><div class="line">      <span class="literal">null</span>,          <span class="comment">-- extenttype</span></div><div class="line">      <span class="literal">null</span>,          <span class="comment">-- customextent</span></div><div class="line">      <span class="literal">null</span>,          <span class="comment">-- distancex</span></div><div class="line">      <span class="literal">null</span>,          <span class="comment">-- distancey</span></div><div class="line">      <span class="string">'3'</span>::<span class="built_in">text</span>,     <span class="comment">-- firstextraargument</span></div><div class="line">      <span class="string">'1'</span>::<span class="built_in">text</span>,     <span class="comment">-- secondextraargument</span></div><div class="line">      <span class="string">'TRUE'</span>::<span class="built_in">text</span>   <span class="comment">-- third extra argument</span></div><div class="line">    ),  <span class="comment">-- fromrast</span></div><div class="line">    <span class="number">1</span>,  <span class="comment">-- Target FROM band (band one of fromrast)</span></div><div class="line">    <span class="number">2</span>   <span class="comment">-- Target TO band (band two of torast)</span></div><div class="line">  )</div><div class="line"><span class="keyword">AS</span> rast</div><div class="line"><span class="keyword">FROM</span> starter <span class="keyword">AS</span> b1;</div></pre></td></tr></table></figure>
<p>Now, you might be thinking, “That’s exactly how the <a href="https://www.postgresql.org/docs/9.5/static/xfunc-sql.html" target="_blank" rel="external">docs</a> (jump to ‘35.4.5. SQL Functions with Variable Numbers of Arguments’) say you pass <code>VARIADIC</code> arguments, Nick!” And I read those too!</p>
<p>I don’t know why it didn’t work the first time I tried it, but as I explained on SE, I have a very strong suspicion it had something to do with my inexperience with PostGIS in general and how it works with double/single quotes in particular. I hope this helps you avoid the same problem.</p>
<p>If you’re interested in learning more about how you can use <code>ST_MapAlgebra</code>, check out my <a href="/blog/tags/raster-math-series">Raster Math Series</a>.</p>
<p>If you’d like to see more about writing <code>ST_MapAlgebra</code> callbacks that accept userags, you can dig through <a href="https://github.com/pedrogit/postgisaddons/blob/master/postgis_addons.sql" target="_blank" rel="external">these examples</a> suggested by Pierre Racine, or this <a href="http://www.bostongis.com/blog/index.php?/archives/234-PostGIS-Day-Game-of-Life-celebration.html" target="_blank" rel="external">totally crazy but really cool one</a> from <a href="https://twitter.com/reginaobe" target="_blank" rel="external">Regina Obe</a> on setting up the famous <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank" rel="external">Game of Life</a> in PostGIS.</p>
]]></content>
    
    <summary type="html">
    
      The docs say that we can pass additional arguments to ST_MapAlgebra callbacks, but how do we actually do that?
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgis" scheme="https://nronnei.github.io/blog/tags/postgis/"/>
    
      <category term="raster" scheme="https://nronnei.github.io/blog/tags/raster/"/>
    
      <category term="raster math series" scheme="https://nronnei.github.io/blog/tags/raster-math-series/"/>
    
      <category term="pl/pgsql" scheme="https://nronnei.github.io/blog/tags/pl-pgsql/"/>
    
  </entry>
  
  <entry>
    <title>Creating Rasters from Scratch in PostGIS, Part 3</title>
    <link href="https://nronnei.github.io/blog/2017/03/creating-rasters-from-scratch-in-postgis-pt3/"/>
    <id>https://nronnei.github.io/blog/2017/03/creating-rasters-from-scratch-in-postgis-pt3/</id>
    <published>2017-03-28T00:00:00.000Z</published>
    <updated>2017-04-04T13:50:18.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>In this post, we’ll learn how to create a multi-band raster from an existing raster in PostGIS.</p>
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>This technique is useful for more than the simulation I discussed in the <a href="/blog/2017/03/creating-rasters-from-scratch-in-postgis/">first</a> and <a href="/blog/2017/03/creating-rasters-from-scratch-in-postgis-pt2/">second</a> posts in this series. It allows us to combine the data of many rasters into a single raster, which can make the data a little easier to work with.</p>
<p>In this post, I’ll demonstrate how I created the initial raster I used in <a href="/blog/2017/03/random-map-algebra-callback-in-postgis/">my post</a> on writing multi-band <code>ST_MapAlgebra</code> callback functions.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>What I wanted when I set out was a raster made up of two 8-bit Unsigned Integer bands: the first with all cell values set to 5 and the second with values all ranging between 1 and 5 roughly based on a normal distribution.</p>
<p>In practice, we rarely modify existing raster tables when doing analysis or data management (but you can). We typically create new ones. Bearing this in mind, it didn’t make sense to <em>begin</em> with a two band raster. Especially considering that we can’t initialize a raster band with an existing value. We have to modify the cells with an <code>ST_MapAlgebra</code> callback, and <code>ST_MapAlgebra</code> only returns single band rasters.</p>
<h2 id="Using-Map-Algebra"><a href="#Using-Map-Algebra" class="headerlink" title="Using Map Algebra"></a>Using Map Algebra</h2><p>So, we begin with a single band raster:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Create a new table for our new raster</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.starter(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"><span class="comment">-- Insert into our newly created table</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.starter(rast)</div><div class="line"><span class="keyword">SELECT</span> ST_AddBand(</div><div class="line">  ST_MakeEmptyRaster(<span class="number">1500</span>,<span class="number">1500</span>,<span class="number">-105.4330444336</span>,<span class="number">40.7170785158</span>,<span class="number">0.00208333</span>,<span class="number">0.00208333</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4326</span>),</div><div class="line">  <span class="number">1</span>, <span class="string">'8BUI'</span>::<span class="built_in">text</span>, <span class="number">5</span>, <span class="number">0</span>);</div><div class="line"><span class="comment">-- Want to learn more about this query and its parameters?</span></div><div class="line"><span class="comment">-- Check out the first post in this series.</span></div></pre></td></tr></table></figure>
<p>With our single band raster created, let’s see what we can do about adding another. As I said above, we’ll need an <code>ST_MapAlgebra</code> callback function to do the job. Here’s what that function looks like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">CREATE OR REPLACE FUNCTION</div><div class="line">generate_random_int_raster(value double precision[][][], pos integer[][], VARIADIC userargs text[] DEFAULT NULL::text[])</div><div class="line">  RETURNS double precision</div><div class="line">  LANGUAGE plpgsql</div><div class="line">  IMMUTABLE  -- careful: this function is immutable, yours may not be</div><div class="line"></div><div class="line">  AS $$</div><div class="line">    DECLARE</div><div class="line">      rando integer;</div><div class="line">      non_zero boolean;</div><div class="line">      mean integer;</div><div class="line">      sd integer;</div><div class="line">    BEGIN</div><div class="line"></div><div class="line">      non_zero := TRUE;    -- Used in the conditional below</div><div class="line">      mean := 3;           -- Mean of my normal distribution</div><div class="line">      sd := 1;             -- Standard deviation of my normal distribution</div><div class="line"></div><div class="line"></div><div class="line">      -- I've set up this conditional statement so that we can</div><div class="line">      -- control whether or not we want to return 0 as a value.</div><div class="line">      -- In my case, 0 is my nodata value, so I don't want that</div><div class="line">      -- to happen.</div><div class="line"></div><div class="line"></div><div class="line">      IF non_zero THEN     -- Make sure that our random value is greater than 0</div><div class="line">      rando := 0;          -- Initialize our random value at 0</div><div class="line">      LOOP</div><div class="line">        IF rando &gt; 0 THEN  -- If rando is non-zero...</div><div class="line">          EXIT;            -- exit the loop.</div><div class="line">        ELSE               -- Otherwise,</div><div class="line">          rando := trunc(normal_rand(1, mean, sd))::integer;  -- get a new value.</div><div class="line">        END IF;</div><div class="line">      END LOOP;</div><div class="line">                           -- If 0 is allowed, just get a value.</div><div class="line">      ELSE</div><div class="line">      rando := trunc(normal_rand(1, mean, sd))::integer;</div><div class="line">      END IF;</div><div class="line"></div><div class="line"></div><div class="line">      RETURN rando;        -- Notice that we only return the random number,</div><div class="line">                           -- and don't do anything with the existing band.</div><div class="line">    END;</div><div class="line">    $$;</div></pre></td></tr></table></figure>
<p>When we created our <code>starter</code> raster, we added a band <strong>to</strong> the empty raster in the <code>torast</code> position of the <code>ST_AddBand</code> function (<a href="http://postgis.net/docs/RT_ST_AddBand.html" target="_blank" rel="external">see docs</a>, Varaiant 5).</p>
<p>This time, we’ll specify <code>starter</code> as the <code>torast</code> (instead of an empty raster) and we’ll specify the results of our <code>ST_MapAlgebra</code> callback function as the <code>fromrast</code>. We also stipulate that this new band should be band two, although this isn’t strictly necessary as omitting the band value will automatically append the new band to the end of the raster’s band list.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.sim_250(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.sim_250(rast)</div><div class="line"><span class="keyword">SELECT</span></div><div class="line">  ST_AddBand(b1.rast,  <span class="comment">-- torast</span></div><div class="line">    ST_MapAlgebra(b1.rast,  <span class="comment">-- Starter raster</span></div><div class="line">      <span class="number">1</span>,  <span class="comment">-- First band of our starter raster is the target band (not that we use it)</span></div><div class="line">      <span class="string">'generate_random_int_raster(double precision[][][], integer[][], text[])'</span>::regprocedure</div><div class="line">    ),  <span class="comment">-- fromrast</span></div><div class="line">    <span class="number">1</span>,  <span class="comment">-- Target FROM band (band one of fromrast)</span></div><div class="line">    <span class="number">2</span>   <span class="comment">-- Target TO band (band two of torast)</span></div><div class="line">  )</div><div class="line"><span class="keyword">AS</span> rast</div><div class="line"><span class="keyword">FROM</span> starter <span class="keyword">AS</span> b1;</div></pre></td></tr></table></figure>
<p>Just like that, you’ve got a new two band raster! This technique is quite useful if you want to perform an operation on a few bands of a raster, then store the result in the same raster in a new band.</p>
<h2 id="Using-Existing-Rasters"><a href="#Using-Existing-Rasters" class="headerlink" title="Using Existing Rasters"></a>Using Existing Rasters</h2><p>Of course, you can do the same sort of thing using only existing rasters. Perhaps you need to combine several rasters about climate into a single one to use in a model. You can do so like this:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.new_raster(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line">SELCT INTO public.new_raster(rast)</div><div class="line"><span class="keyword">SELECT</span> ST_AddBand(</div><div class="line">          ST_AddBand(b1.rast, b2.rast, <span class="number">2</span>, <span class="number">2</span>), <span class="comment">-- Set band 2 of our second raster</span></div><div class="line">                                              <span class="comment">-- as band 2 of the first raster</span></div><div class="line">            b3.rast, <span class="number">1</span>, <span class="number">3</span>) <span class="comment">-- Set band 1 of the third raster</span></div><div class="line">                           <span class="comment">-- as band 3 of the first raster</span></div><div class="line"><span class="keyword">AS</span> rast</div><div class="line"><span class="keyword">FROM</span> test_b1 <span class="keyword">AS</span> b1, test_b2 <span class="keyword">AS</span> b2, test_b3 <span class="keyword">AS</span> b3;</div></pre></td></tr></table></figure>
<p>I hope this post was useful to you. To learn more about <code>ST_MapAlgebra</code> and its callbacks, make sure to check out my <a href="/blog/tags/raster-math-series/">Raster Math Series</a>.</p>
]]></content>
    
    <summary type="html">
    
      In this post, we&#39;ll learn how to create a multi-band raster from another raster using PostGIS.
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgis" scheme="https://nronnei.github.io/blog/tags/postgis/"/>
    
      <category term="sql" scheme="https://nronnei.github.io/blog/tags/sql/"/>
    
      <category term="raster" scheme="https://nronnei.github.io/blog/tags/raster/"/>
    
      <category term="intro to postgis" scheme="https://nronnei.github.io/blog/tags/intro-to-postgis/"/>
    
  </entry>
  
  <entry>
    <title>A Totally Random Map Algebra Callback in PostGIS, Part 2</title>
    <link href="https://nronnei.github.io/blog/2017/03/random-map-algebra-callback-in-postgis-pt2/"/>
    <id>https://nronnei.github.io/blog/2017/03/random-map-algebra-callback-in-postgis-pt2/</id>
    <published>2017-03-27T00:00:00.000Z</published>
    <updated>2017-04-04T13:51:37.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>In this post we’ll try to get a better understanding of the structure of plpgsql <code>ST_MapAlgebra</code> callback functions. Specifically, we’ll learn how to write a callback that works on one raster with many bands.</p>
<p>This is the second post in this series, and I encourage you to go back and <a href="/blog/2017/03/random-map-algebra-callback-in-postgis/">read the first</a> if you haven’t already. It gives a much more detailed account of what the parameters mean and why I’m doing things the way I am.</p>
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>It’s pretty common to operate on more than one band of a raster when performing MapAlgebra calculations. If you’re doing any serious image processing, it’s a fact of life. While the last example was bordering on overkill, we approach the limits of the <a href="http://postgis.net/docs/manual-dev/RT_ST_MapAlgebra_expr.html" target="_blank" rel="external">Expression Version</a> of <code>ST_MapAlgebra</code> very quickly.</p>
<p>Here we’ll provide another fairly basic example of a plpgsql callback function for <code>ST_MapAlgebra</code> that elucidates how one can interact with the data. This example works one-cell-at-a-time, but you can also operate on neighboring cells using this same callback format (post coming soon).</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>If you’re working with real data, carry on! If you’re worried about damaging your dataset or simply don’t want to find one, try simulating some data like I do in my post on <a href="/blog/2017/03/creating-rasters-from-scratch-in-postgis/">creating rasters from scratch.</a>.</p>
<p>We’ll start off with our same basic structure as last time, but notice that we declare 2 variables that will hold our pixel values.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- The basic structure of an ST_MapAlgebra() callback</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span></div><div class="line"></div><div class="line">totally_random_2band_callback(pixel <span class="keyword">double</span> <span class="keyword">precision</span>[][][], pos <span class="built_in">integer</span>[][], VARIADIC userargs <span class="built_in">text</span>[])</div><div class="line">  <span class="keyword">RETURNS</span> <span class="built_in">integer</span></div><div class="line">  <span class="keyword">LANGUAGE</span> plpgsql</div><div class="line">  IMMUTABLE  <span class="comment">-- careful: this function is immutable, yours may not be</span></div><div class="line"></div><div class="line">  <span class="keyword">AS</span> $$</div><div class="line">    <span class="keyword">DECLARE</span></div><div class="line">      r1_val <span class="built_in">integer</span>;</div><div class="line">      r2_val integer;</div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">      <span class="comment">-- Do Something</span></div><div class="line">    <span class="keyword">END</span>;</div><div class="line">  $$;</div></pre></td></tr></table></figure>
<p>Of course, you don’t really need to declare variables to hold your pixel values. They just help with clarity for this example.</p>
<h2 id="Let’s-“Do-Something”"><a href="#Let’s-“Do-Something”" class="headerlink" title="Let’s “Do Something”"></a>Let’s “Do Something”</h2><p>For this example, I’ll use a dummy raster I <a href="/blog/2017/03/creating-rasters-from-scratch-in-postgis-pt3/">created</a> whose first band is initialized with all values set to 5. The second band of the raster contains random integers from 1 to 3 (inclusive). Our callback will generate a random integer between 1 and 10 (inclusive), multiply it by the first band, and divide the product by the second band.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">-- The basic structure of an ST_MapAlgebra() callback</div><div class="line">CREATE OR REPLACE FUNCTION</div><div class="line"></div><div class="line">totally_random_2band_callback(pixel double precision[][][], pos integer[][], VARIADIC userargs text[])</div><div class="line">  RETURNS integer</div><div class="line">  LANGUAGE plpgsql</div><div class="line">  IMMUTABLE  -- careful: this function is immutable, yours may not be</div><div class="line"></div><div class="line">  AS $$</div><div class="line">    DECLARE</div><div class="line">      r1_val integer;</div><div class="line">      r2_val integer;</div><div class="line">      rando integer;</div><div class="line">      result integer;</div><div class="line">    BEGIN</div><div class="line">      SELECT trunc(random() * 10 + 1)::int INTO rando;  -- Get a random value between 1 &amp; 11, convert to int</div><div class="line">      r1_val := value[1][1][1]::int;</div><div class="line">      r2_val := value[2][1][1]::int;</div><div class="line">      result :=  (r1_val * rando) / r2_val;</div><div class="line"></div><div class="line">      RETURN result;</div><div class="line">    END;</div><div class="line">  $$;</div></pre></td></tr></table></figure>
<p>Run that.</p>
<p>Get <code>FUNCTION CREATED</code> back.</p>
<p>Let’s play ball.</p>
<p>We’ll call the function and insert the result into an empty table we’ve already created.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Inster into the new table</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.two_band_random(rast)</div><div class="line"><span class="comment">-- Call MapAlgebra</span></div><div class="line"><span class="keyword">SELECT</span> ST_MapAlgebra(</div><div class="line">  <span class="built_in">ARRAY</span>[</div><div class="line">    <span class="keyword">ROW</span>(rast, <span class="number">1</span>),</div><div class="line">    <span class="keyword">ROW</span>(rast, <span class="number">2</span>)</div><div class="line">  ]::rastbandarg[],  <span class="comment">-- Notice that this is pretty different from last time</span></div><div class="line">  <span class="string">'totally_random_callback(double precision[][][], integer[][], text[])'</span>::regprocedure)</div><div class="line"><span class="keyword">FROM</span> public.sim_250;</div></pre></td></tr></table></figure>
<p>Let’s use QGIS and the DBManager plugin to check our results.</p>

<p>Looks pretty good!</p>
]]></content>
    
    <summary type="html">
    
      In this post we&#39;ll learn how to write multi-band callback functions for ST_MapAlgebra.
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgis" scheme="https://nronnei.github.io/blog/tags/postgis/"/>
    
      <category term="raster" scheme="https://nronnei.github.io/blog/tags/raster/"/>
    
      <category term="raster math series" scheme="https://nronnei.github.io/blog/tags/raster-math-series/"/>
    
      <category term="intro to postgis" scheme="https://nronnei.github.io/blog/tags/intro-to-postgis/"/>
    
      <category term="pl/pgsql" scheme="https://nronnei.github.io/blog/tags/pl-pgsql/"/>
    
  </entry>
  
  <entry>
    <title>A Totally Random Map Algebra Callback in PostGIS</title>
    <link href="https://nronnei.github.io/blog/2017/03/random-map-algebra-callback-in-postgis/"/>
    <id>https://nronnei.github.io/blog/2017/03/random-map-algebra-callback-in-postgis/</id>
    <published>2017-03-26T00:00:00.000Z</published>
    <updated>2017-04-04T13:51:32.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>In this post we’ll try to get a better understanding of the structure of plpgsql <code>ST_MapAlgebra</code> callback functions. Specifically, we’ll learn how to write a callback that works on one raster with one band.</p>
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>There are a few posts about how to do this. <a href="http://blog.mackerron.com/2013/07/21/map-algebra-callbacks-postgis-2-1/" target="_blank" rel="external">This one</a> from George MacKerron’s blog gives a much better example of how MA callbacks work in PostGIS, and serves as a model of what I’ll attempt here. As Mr. MacKerron points out, the callback function in the <a href="http://postgis.net/docs/manual-dev/RT_ST_MapAlgebra.html" target="_blank" rel="external">documentation</a> is pretty useless, but it’s also totally uninformative.</p>
<p>Basically, <strong>we’ll write a totally useless function which illustrates how we can manipulate raster values using</strong> <code>ST_MapAlgebra</code>.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>If you’re working with some real data, great! If you’re trying to learn more about <code>ST_MapAlgebra</code> but don’t have a dataset, go check out my post on <a href="/blog/2017/03/creating-rasters-from-scratch-in-postgis/">creating rasters from scratch.</a>. This type of stuff is exactly what I had in mind when I wrote it.</p>
<p>One thing worth noting, is that there are two versions of <code>ST_MapAlgebra</code>: the <a href="http://postgis.net/docs/manual-dev/RT_ST_MapAlgebra_expr.html" target="_blank" rel="external">Expression Version</a> and the <a href="http://postgis.net/docs/manual-dev/RT_ST_MapAlgebra.html" target="_blank" rel="external">Callback Version</a>. Obviously, we’ll be working with the latter in this post. Both are great to be familiar with, but the <a href="http://postgis.net/docs/manual-dev/RT_ST_MapAlgebra.html" target="_blank" rel="external">Callback Version</a> let’s us do much more complicated stuff, including working with cell neighbors (post coming soon). Here however, we’ll be doing a pretty basic operation. Still, it’s one that you couldn’t perform with the <a href="http://postgis.net/docs/manual-dev/RT_ST_MapAlgebra_expr.html" target="_blank" rel="external">Expression Version</a> (as far as I know, anyway)!</p>
<p>Using <a href="http://blog.mackerron.com/2013/07/21/map-algebra-callbacks-postgis-2-1/" target="_blank" rel="external">MacKerron’s post</a> as a guide, I’ve laid out a basic structure that our callback has to follow.</p>
<p>We need three arguments:</p>
<ol>
<li>A 3 dimensional array of a type double precision <code>pixel double precision[][][]</code></li>
<li>A 2 dimensional integer array <code>pos integer[][]</code></li>
<li>A 1 dimensional variadic array to accept any additional user arguments <code>variadic userargs text[]</code></li>
</ol>
<p>In our case, we’re working with integer data so we’ll plan our <code>RETURNS</code> statement accordingly:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- The basic structure of an ST_MapAlgebra() callback</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span></div><div class="line"></div><div class="line">totally_random_callback(pixel <span class="keyword">double</span> <span class="keyword">precision</span>[][][], pos <span class="built_in">integer</span>[][], VARIADIC userargs <span class="built_in">text</span>[])</div><div class="line">  <span class="keyword">RETURNS</span> <span class="built_in">integer</span></div><div class="line">  <span class="keyword">LANGUAGE</span> plpgsql</div><div class="line">  IMMUTABLE  <span class="comment">-- careful: this function is immutable, yours may not be</span></div><div class="line"></div><div class="line">  <span class="keyword">AS</span> $$</div><div class="line">    <span class="keyword">DECLARE</span></div><div class="line">      pixval <span class="built_in">integer</span>;</div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">      <span class="comment">-- Do Something</span></div><div class="line">    <span class="keyword">END</span>;</div><div class="line">  $$;</div></pre></td></tr></table></figure>
<h4 id="A-note-of-caution"><a href="#A-note-of-caution" class="headerlink" title="A note of caution:"></a>A note of caution:</h4><p>I’ve seen several tutorials, including MacKerron’s and <a href="http://www.postgresonline.com/journal/archives/326-Writing-PostGIS-raster-Map-Algebra-Callback-Functions-in-PLV8.html" target="_blank" rel="external">this one</a> from Regina Obe, that use an array of a different type for the pixel value. I tried this, and it never worked for me with <code>integer</code>. So, I’m sticking to <code>double precision</code> here even though we’ll convert back to <code>integer</code> at the end (as you can see from <code>RETURNS integer</code>).</p>
<h2 id="Let’s-“Do-Something”"><a href="#Let’s-“Do-Something”" class="headerlink" title="Let’s “Do Something”"></a>Let’s “Do Something”</h2><p>We’ve initialized our raster with a value of 10 for all cells. As you can see from this picture, it’s pretty boring to look at. Let’s throw some chaos in there!</p>
<img src="/blog/2017/03/random-map-algebra-callback-in-postgis/initial-raster.png" alt="Our initial raster." title="Our initial raster.">
<p>Since we are creating a random raster, but not entirely random. After all, it would be nice to learn a little bit about how to interact with our raster data since that’s the primary goal of this post. Bearing that in mind, let’s perform our operations using the values of our initial raster.</p>
<p>Let’s just get a random integer between 1 and 10 (inclusive) for each cell/pixel. We’ll multiply this by <code>pixval</code>, our initial raster value.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CREATE OR REPLACE FUNCTION</div><div class="line">totally_random_callback(pixel double precision[][][], pos integer[][], VARIADIC userargs text[])</div><div class="line">  RETURNS integer</div><div class="line">  LANGUAGE plpgsql</div><div class="line">  IMMUTABLE  -- careful: this function is immutable, yours may not be</div><div class="line"></div><div class="line">  AS $$</div><div class="line">    DECLARE</div><div class="line">      pixval integer;</div><div class="line">      rando integer;</div><div class="line">      result integer;</div><div class="line">    BEGIN</div><div class="line">      SELECT floor(random() * 9 + 1)::int INTO rando;  -- Get a random value between 1 &amp; 11, convert to int</div><div class="line">      pixval := value[1][1][1]::int                    -- pixel indices: [raster #][xdistance][ydistance]</div><div class="line">      result :=  pixval * rando;                       -- Notice we cast the pixel value back to integer</div><div class="line"></div><div class="line">      RETURN result;</div><div class="line">    END;</div><div class="line">  $$;</div></pre></td></tr></table></figure>
<p>Okay, so we run that, and we get <code>FUNCTION CREATED</code> back. Time to test it out!</p>
<p>Here we’ll call the function on a dummy raster we saw above. We’ll take the result and stuff it in the empty table we created for the purpose.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Create a table for our new raster to live in</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.totally_random(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- Inster into the new table</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.totally_random(rast)</div><div class="line"><span class="comment">-- Call MapAlgebra</span></div><div class="line"><span class="keyword">SELECT</span> ST_MapAlgebra(</div><div class="line">  rast,  <span class="comment">-- Raster data column</span></div><div class="line">  <span class="number">1</span>,  <span class="comment">-- Which band to use (1-based index)</span></div><div class="line">  <span class="string">'totally_random_callback(double precision[][][], integer[][], text[])'</span>::regprocedure)</div><div class="line">  <span class="comment">-- ^^ Our callback function in a string cast as a regprocedure ^^</span></div><div class="line">  <span class="comment">-- Notice that we don't use the names of the inputs here</span></div><div class="line"><span class="keyword">FROM</span> public.test_250;  <span class="comment">-- The table containing our initial raster</span></div></pre></td></tr></table></figure>
<p>Popping on over to QGIS, we can check out our results using the DBManager plugin. You can also use whatever tools you like, but I think those ones are great and they work very well together.</p>
<img src="/blog/2017/03/random-map-algebra-callback-in-postgis/final-raster.png" alt="Our final raster." title="Our final raster.">
<p>Wow, look at all that uniform noise! It seems like we achieved our objective. For a look at how to do write a callback that works with multiple bands, check out <a href="/blog/2017/03/random-map-algebra-callback-in-postgis-pt2/">the next post in this series.</a></p>
]]></content>
    
    <summary type="html">
    
      In this post we&#39;ll try to get a better understanding of the structure of ST_MapAlgebra callback functions.
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgis" scheme="https://nronnei.github.io/blog/tags/postgis/"/>
    
      <category term="raster" scheme="https://nronnei.github.io/blog/tags/raster/"/>
    
      <category term="raster math series" scheme="https://nronnei.github.io/blog/tags/raster-math-series/"/>
    
      <category term="intro to postgis" scheme="https://nronnei.github.io/blog/tags/intro-to-postgis/"/>
    
      <category term="pl/pgsql" scheme="https://nronnei.github.io/blog/tags/pl-pgsql/"/>
    
  </entry>
  
  <entry>
    <title>Creating Rasters from Scratch in PostGIS, Part 2</title>
    <link href="https://nronnei.github.io/blog/2017/03/creating-rasters-from-scratch-in-postgis-pt2/"/>
    <id>https://nronnei.github.io/blog/2017/03/creating-rasters-from-scratch-in-postgis-pt2/</id>
    <published>2017-03-25T00:00:00.000Z</published>
    <updated>2017-04-04T13:34:01.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>In this post, we’ll learn how to create a multi-band raster from scratch using PostGIS. This ability will be particularly useful as we begin exploring the relatively uncharted waters of the PostGIS Raster Module.</p>
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose:"></a>Purpose:</h2><p>This is a companion article for <a href="blog/2017/03/creating-rasters-from-scratch-in-postgis/">Creating Rasters from Scratch in PostGIS</a>. I recommend reading it if you haven’t already to learn why you might want to do this as well as for a more detailed explanation of the parameters.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Let’s look at the code from our last post:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Insert into our newly created table</span></div><div class="line"><span class="comment">-- Insert into that table</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.test_250(rast)</div><div class="line"><span class="keyword">SELECT</span> ST_AddBand(</div><div class="line">  <span class="comment">-- Make empty raster</span></div><div class="line">  ST_MakeEmptyRaster(</div><div class="line">      <span class="number">1500</span>, <span class="comment">-- Raster width x (in pixels)</span></div><div class="line">      <span class="number">1500</span>, <span class="comment">-- Raster width y (in pixels)</span></div><div class="line">      <span class="number">-105.4330444336</span>, <span class="comment">-- Upper left X coordinate</span></div><div class="line">      <span class="number">40.7170785158</span>, <span class="comment">-- Upper left Y coordinate</span></div><div class="line">      <span class="number">0.00208333</span>, <span class="comment">-- X Cell Resolution (in degrees) (~250m)</span></div><div class="line">      <span class="number">0.00208333</span>, <span class="comment">-- Y Cell Resolution (in degrees) (~250m)</span></div><div class="line">      <span class="number">0</span>, <span class="comment">-- X skew</span></div><div class="line">      <span class="number">0</span>, <span class="comment">-- Y skew</span></div><div class="line">      <span class="number">4326</span> <span class="comment">-- SRID (WGS 84)</span></div><div class="line">    ),</div><div class="line">    <span class="comment">-- We're making a single band raster, but you can add</span></div><div class="line">    <span class="comment">-- as many bands as you like by adding additional rows</span></div><div class="line">    <span class="comment">-- to the array.</span></div><div class="line">    <span class="built_in">ARRAY</span> [</div><div class="line">      <span class="keyword">ROW</span>(</div><div class="line">        <span class="number">1</span>,  <span class="comment">-- Band index: sets this as the first band</span></div><div class="line">        <span class="string">'8BUI'</span>::<span class="built_in">text</span>,  <span class="comment">-- Pixel Type (string rep of ST_BandPixelType types)</span></div><div class="line">        <span class="number">5</span>,  <span class="comment">-- Initialized pixel value</span></div><div class="line">        <span class="number">255</span>  <span class="comment">-- Nodata Value</span></div><div class="line">      )</div><div class="line">    ]::addbandarg[]</div><div class="line">);</div></pre></td></tr></table></figure>
<p>In order to add additional bands, all we have to do is add another row to our <code>rasterbandarg[]</code>:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.test_250(rast)</div><div class="line"><span class="keyword">SELECT</span> ST_AddBand( ST_MakeEmptyRaster(<span class="number">1500</span>, <span class="number">1500</span>, <span class="number">-105.4330444336</span>, <span class="number">40.7170785158</span>, <span class="number">0.00208333</span>, <span class="number">0.00208333</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4326</span> ),</div><div class="line">    <span class="built_in">ARRAY</span> [</div><div class="line">      <span class="keyword">ROW</span>(<span class="number">1</span>, <span class="string">'8BUI'</span>::<span class="built_in">text</span>, <span class="number">5</span>, <span class="number">255</span>),</div><div class="line">      <span class="keyword">ROW</span>(<span class="number">1</span>, <span class="string">'8BUI'</span>::<span class="built_in">text</span>, <span class="number">10</span>, <span class="number">255</span>)</div><div class="line">    ]::addbandarg[]</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Yep. It’s really that easy!</p>
]]></content>
    
    <summary type="html">
    
      In this post, we&#39;ll learn how to create a multi-band raster from scratch using PostGIS.
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgis" scheme="https://nronnei.github.io/blog/tags/postgis/"/>
    
      <category term="sql" scheme="https://nronnei.github.io/blog/tags/sql/"/>
    
      <category term="raster" scheme="https://nronnei.github.io/blog/tags/raster/"/>
    
      <category term="intro to postgis" scheme="https://nronnei.github.io/blog/tags/intro-to-postgis/"/>
    
  </entry>
  
  <entry>
    <title>Creating Rasters from Scratch in PostGIS, Part 1</title>
    <link href="https://nronnei.github.io/blog/2017/03/creating-rasters-from-scratch-in-postgis/"/>
    <id>https://nronnei.github.io/blog/2017/03/creating-rasters-from-scratch-in-postgis/</id>
    <published>2017-03-24T00:00:00.000Z</published>
    <updated>2017-04-05T23:04:04.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>In this post, we’ll learn how to create a single-band raster from scratch using PostGIS. This ability will be particularly useful as we begin exploring the relatively uncharted waters of the PostGIS Raster Module.</p>
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>Using <a href="http://postgis.net/docs/manual-2.1/RT_ST_AddBand.html" target="_blank" rel="external"><code>ST_AddBand</code></a> and <a href="http://postgis.net/docs/manual-2.1/RT_ST_MakeEmptyRaster.html" target="_blank" rel="external"><code>ST_MakeEmptyRaster</code></a>, we’ll create a single band, 8 bit unsigned integer raster. While it’s nothing fancy, it will help us better understand the mechanics of the Raster Module and it will also prove useful as a source of training data for the posts in the Raster Math Series.</p>
<p>Here, I’ll create a 250m resolution raster with a constant value. This method can easily create any other size and at whatever starting value the user may like. See the “All Together Now” section for some other common resolutions translated to decimal degrees.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>First, lets create a table to hold the results of our operations.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Create a table for our new raster to live in</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.test_250(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="Creating-a-Raster"><a href="#Creating-a-Raster" class="headerlink" title="Creating a Raster"></a>Creating a Raster</h2><p>Now, let’s go about constructing our raster. I’m creating my raster starting somewhere in the Colorado Rockies. You don’t need to do the same place or size, it’s completely up to you.</p>
<p>You can adjust where and how big your raster is by changing the upper left coordinates and the number of pixels wide and tall your raster should be. The upper left coordinate is the origin, so no raster cells will appear “upper” or “lefter” of it.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Insert into our newly created table</span></div><div class="line"><span class="comment">-- Insert into that table</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.test_250(rast)</div><div class="line"><span class="keyword">SELECT</span> ST_AddBand(</div><div class="line">  <span class="comment">-- Make empty raster</span></div><div class="line">  ST_MakeEmptyRaster(</div><div class="line">      <span class="number">1500</span>, <span class="comment">-- Raster width x (in pixels)</span></div><div class="line">      <span class="number">1500</span>, <span class="comment">-- Raster width y (in pixels)</span></div><div class="line">      <span class="number">-105.4330444336</span>, <span class="comment">-- Upper left X coordinate</span></div><div class="line">      <span class="number">40.7170785158</span>, <span class="comment">-- Upper left Y coordinate</span></div><div class="line">      <span class="number">0.00208333</span>, <span class="comment">-- X Cell Resolution (in degrees) (~250m)</span></div><div class="line">      <span class="number">0.00208333</span>, <span class="comment">-- Y Cell Resolution (in degrees) (~250m)</span></div><div class="line">      <span class="number">0</span>, <span class="comment">-- X skew</span></div><div class="line">      <span class="number">0</span>, <span class="comment">-- Y skew</span></div><div class="line">      <span class="number">4326</span> <span class="comment">-- SRID (WGS 84)</span></div><div class="line">    ),</div><div class="line">    <span class="comment">-- We're making a single band raster, but you can add</span></div><div class="line">    <span class="comment">-- as many bands as you like by adding additional rows</span></div><div class="line">    <span class="comment">-- to the array.</span></div><div class="line">    <span class="built_in">ARRAY</span> [</div><div class="line">      <span class="keyword">ROW</span>(</div><div class="line">        <span class="number">1</span>,  <span class="comment">-- Band index: sets this as the first band</span></div><div class="line">        <span class="string">'8BUI'</span>::<span class="built_in">text</span>,  <span class="comment">-- Pixel Type (string rep of ST_BandPixelType types)</span></div><div class="line">        <span class="number">5</span>,  <span class="comment">-- Initialized pixel value</span></div><div class="line">        <span class="number">255</span>  <span class="comment">-- Nodata Value</span></div><div class="line">      )</div><div class="line">    ]::addbandarg[]</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Et voilà! There you have it - a raster from scratch in PostGIS.</p>
<p>Now, If you did like me and left yourself with a massive raster, you may want to go ahead and tile it out to improve your query times. Additionally, this is a very common operation to perform on large rasers and it’s a good thing to be familiar with.</p>
<p>If you don’t want to tile your raster, you can go ahead and skip to the Adding Constraints section.</p>
<h2 id="Tiling-our-New-Raster"><a href="#Tiling-our-New-Raster" class="headerlink" title="Tiling our New Raster"></a>Tiling our New Raster</h2><p>Tiling is a very common operation on large rasters. It allows you to build extremely fast spatial indexes on the data, vastly improving query times. For example, when I tried to load untiled large rasters into QGIS from PostGIS, it often crashes unless the data are tiled and indexed.</p>
<p>To tile your rasters, just do this:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Create a new table to hold our tiled raster</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.test_250_tiled(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- Tile it out</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.test_250_tiled(rast)</div><div class="line">  <span class="keyword">SELECT</span> ST_Tile(rast, <span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="literal">TRUE</span>, <span class="number">0</span>)</div><div class="line">  <span class="keyword">FROM</span> public.test_250;</div></pre></td></tr></table></figure></p>
<h2 id="Adding-Constraints"><a href="#Adding-Constraints" class="headerlink" title="Adding Constraints"></a>Adding Constraints</h2><p>There are a couple main reasons to add constraints to your raster tables after you’ve populated them. First, it improves query time by allowing the software to make certain assumptions about the geometry of your data. Second, it ensures that your data meet the standards PostGIS requires for various operations, such as alignment.</p>
<p>Add constraints by using the <a href="http://postgis.net/docs/manual-2.2/RT_AddRasterConstraints.html" target="_blank" rel="external"><code>AddRasterConstraints</code></a> function. See the <a href="http://postgis.net/docs/manual-2.2/RT_AddRasterConstraints.html" target="_blank" rel="external">documentation</a> for more details on which constraints you can add and what they do.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Add constraints explicitly</span></div><div class="line"><span class="keyword">SELECT</span> AddRasterConstraints(</div><div class="line">  <span class="string">'test_250_tiled'</span>::<span class="keyword">name</span>,</div><div class="line">  <span class="string">'rast'</span>::<span class="keyword">name</span>,</div><div class="line">  <span class="string">'regular_blocking'</span>,</div><div class="line">  <span class="string">'blocksize'</span>,</div><div class="line">  <span class="string">'same_alignment'</span>,</div><div class="line">  <span class="string">'srid'</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- Or, add all possible constraints</span></div><div class="line"><span class="keyword">SELECT</span> AddRasterConstraints(</div><div class="line">  <span class="string">'test_250_tiled'</span>::<span class="keyword">name</span>,</div><div class="line">  <span class="string">'rast'</span>::<span class="keyword">name</span>,</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="All-Together-Now"><a href="#All-Together-Now" class="headerlink" title="All Together Now"></a>All Together Now</h2><p>So, putting it all together, here’s what we’ve got:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Some common raster cell sizes:</span></div><div class="line"><span class="comment">-- 3 (90m) arcseconds = 0.000833333 degrees</span></div><div class="line"><span class="comment">-- 7.5 (250m) arcseconds = 0.00208333 degrees</span></div><div class="line"><span class="comment">-- 15 (500m) arcseconds = 0.00416667 degrees</span></div><div class="line"></div><div class="line"><span class="comment">-- Create a table for our new raster to live in</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.test_250(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- Insert into that table</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.test_250(rast)</div><div class="line"><span class="keyword">SELECT</span></div><div class="line">  <span class="comment">-- We're making a single band raster,</span></div><div class="line">  <span class="comment">-- though these can be chained together</span></div><div class="line">  ST_AddBand(</div><div class="line">    <span class="comment">-- Make empty raster</span></div><div class="line">    ST_MakeEmptyRaster(</div><div class="line">      <span class="number">1500</span>, <span class="comment">-- Raster width x (in pixels)</span></div><div class="line">      <span class="number">1500</span>, <span class="comment">-- Raster width y (in pixels)</span></div><div class="line">      <span class="number">-105.4330444336</span>, <span class="comment">-- Upper left X coordinate</span></div><div class="line">      <span class="number">40.7170785158</span>, <span class="comment">-- Upper left Y coordinate</span></div><div class="line">      <span class="number">0.00208333</span>, <span class="comment">-- X Cell Resolution (in degrees) (~250m)</span></div><div class="line">      <span class="number">0.00208333</span>, <span class="comment">-- Y Cell Resolution (in degrees) (~250m)</span></div><div class="line">      <span class="number">0</span>, <span class="comment">-- X skew</span></div><div class="line">      <span class="number">0</span>, <span class="comment">-- Y skew</span></div><div class="line">      <span class="number">4326</span> <span class="comment">-- SRID (WGS 84)</span></div><div class="line">    ),</div><div class="line">    <span class="string">'8BUI'</span>::<span class="built_in">text</span> <span class="comment">-- Pixel Type (string rep of ST_BandPixelType types)</span></div><div class="line">    ,<span class="number">5</span> <span class="comment">-- Initialized pixel value</span></div><div class="line">    ,<span class="number">0</span> <span class="comment">-- Nodata Value</span></div><div class="line">  ) <span class="keyword">AS</span> rast;</div><div class="line"></div><div class="line"><span class="comment">-- Create a new table to hold our tiled raster</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> public.test_250_tiled(</div><div class="line">  rid <span class="built_in">SERIAL</span> primary <span class="keyword">key</span>, rast raster</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- Tile it out</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.test_250_tiled(rast)</div><div class="line">  <span class="keyword">SELECT</span> ST_Tile(rast, <span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="literal">TRUE</span>, <span class="number">0</span>)</div><div class="line">  <span class="keyword">FROM</span> public.test_250;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> AddRasterConstraints(</div><div class="line">  <span class="string">'test_250_tiled'</span>::<span class="keyword">name</span>,</div><div class="line">  <span class="string">'rast'</span>::<span class="keyword">name</span>,</div><div class="line">  <span class="string">'regular_blocking'</span>,</div><div class="line">  <span class="string">'blocksize'</span>,</div><div class="line">  <span class="string">'same_alignment'</span>,</div><div class="line">  <span class="string">'srid'</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="There-you-have-it"><a href="#There-you-have-it" class="headerlink" title="There you have it!"></a>There you have it!</h2><p>Enjoy your new raster powers! I hope this was helpful to you.</p>
]]></content>
    
    <summary type="html">
    
      In this post, we&#39;ll learn how to create a single-band raster from scratch using PostGIS.
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgis" scheme="https://nronnei.github.io/blog/tags/postgis/"/>
    
      <category term="sql" scheme="https://nronnei.github.io/blog/tags/sql/"/>
    
      <category term="raster" scheme="https://nronnei.github.io/blog/tags/raster/"/>
    
      <category term="intro to postgis" scheme="https://nronnei.github.io/blog/tags/intro-to-postgis/"/>
    
  </entry>
  
  <entry>
    <title>What Happened to the UncertWeb?</title>
    <link href="https://nronnei.github.io/blog/2017/03/what-happened-to-uncertweb/"/>
    <id>https://nronnei.github.io/blog/2017/03/what-happened-to-uncertweb/</id>
    <published>2017-03-12T00:00:00.000Z</published>
    <updated>2017-03-31T17:37:02.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Modern-Mystery"><a href="#A-Modern-Mystery" class="headerlink" title="A Modern Mystery"></a>A Modern Mystery</h2><p>In the course of my thesis research on developing a geodata portalt to distribute the results some error modeling work Dr. Ashton Shortridge performed, I discovered a cool framework for doing something similar to what I proposed called the <a href="https://research.aston.ac.uk/portal/files/368591/EMS_Special_Issue_Integrated_Modelling_accepted_draft.pdf" target="_blank" rel="external">UncertWeb</a>. An uncertainty enabled counterpart to the <a href="http://www.eurogeoss.eu/Documents/publications%20-%20papers/Environmental%20model%20access%20and%20interoperability-%20The%20GEO%20Model%20Web%20initiative_WP2%20%20jan2013.pdf" target="_blank" rel="external">GEO Model Web</a>, the UncertWeb aims to provide a library of models, model engines, and model services which consider uncertainty (for more detail, <a href="https://research.aston.ac.uk/portal/files/368591/EMS_Special_Issue_Integrated_Modelling_accepted_draft.pdf" target="_blank" rel="external">read the paper</a>).</p>
<p>The idea is more or less the same as mine:</p>
<ol>
<li>Geostatistical modeling is hard to do for the average user</li>
<li>There are geostats experts who build error-aware models</li>
<li>If people could use those models without being experts, then they could improve their own research</li>
<li>The web helps us realize number 3 by providing Model-as-a-Service (MaaS), Service Oriented Architecture</li>
</ol>
<p>In other words, the web lets experts do the hard stuff and users access the final product. A fairly sound idea à la “work smarter not harder” philosophy!</p>
<p>However, something happened…</p>
<p><a href="http://www.uncertweb.org" target="_blank" rel="external">The website</a> for UncertWeb returns no response at all, despite the fact that it’s <a href="https://who.is/whois/uncertweb.org" target="_blank" rel="external">still registered</a> to one of the main developers.</p>
<p>On the <a href="https://wiki.aston.ac.uk/foswiki/bin/view/UncertWeb/UncertWebSoftware" target="_blank" rel="external">official project page</a>, things seem to be going well. However, a look at the University of Muenster’s <a href="https://www.uni-muenster.de/Geoinformatics/en/research/projects/UncertWeb.html" target="_blank" rel="external">page for the project</a> says it finished in 2013. A look at the <a href="https://github.com/uncertweb/" target="_blank" rel="external">official GitHub Organization account</a> and included repos suggests that development died off in 2013, with a few exceptions. To make matters more confusing, a look at the <a href="https://github.com/52North/UncertWeb" target="_blank" rel="external">52North version</a> of the UncertWeb repo shows fairly heavy development in 2016.</p>
<p>It seems wrong that such a good, useful idea should fade away so quickly. Sure, it’s very complicated to pull it all together, but there was so much ambition in 2013! So many papers published relating to the topic, too.</p>
<p>So, I ask plaintively, <strong>What happened to the UncertWeb?</strong></p>
<hr>
<h2 id="Update-03-30-17"><a href="#Update-03-30-17" class="headerlink" title="Update  -  03/30/17"></a>Update  -  03/30/17</h2><p>I emailed Dr. Pebesema one of the prcinipal investigators on this project (and autor of R’s <code>gstat</code> package) to ask what happened to the project.</p>
<p>He informed me that the project was funded from 2009 to 2012, and he hasn’t been involved with it since. He also suggested that I contact the developer at 52North who has been working on it. I’ll post another update if and when I do.</p>
]]></content>
    
    <summary type="html">
    
      A small mystery I&#39;ve stumbled upon during my thesis research.
    
    </summary>
    
      <category term="cruft" scheme="https://nronnei.github.io/blog/categories/cruft/"/>
    
      <category term="thesis" scheme="https://nronnei.github.io/blog/categories/cruft/thesis/"/>
    
    
      <category term="geostats" scheme="https://nronnei.github.io/blog/tags/geostats/"/>
    
  </entry>
  
  <entry>
    <title>Installing PL/V8 in PostgreSQL 9.5</title>
    <link href="https://nronnei.github.io/blog/2016/10/install-postgres-9-5-plv8/"/>
    <id>https://nronnei.github.io/blog/2016/10/install-postgres-9-5-plv8/</id>
    <published>2016-10-31T00:00:00.000Z</published>
    <updated>2017-03-31T17:36:47.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>This is a very straightforward entry. Our only goal in this post is to make sure we have installed PostgreSQL’s <a href="https://github.com/plv8/plv8" target="_blank" rel="external">PL/V8</a>.</p>
<p><strong>Full Disclosure:</strong> Most of this is straight off the <a href="https://github.com/plv8/plv8" target="_blank" rel="external">GitHub page</a>.</p>
<img src="/blog/2016/10/install-postgres-9-5-plv8/v8.png" alt="V8 - Google's lightning fast JavaScript engine." title="V8 - Google's lightning fast JavaScript engine.">
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>Install <a href="https://github.com/plv8/plv8" target="_blank" rel="external">PL/V8</a> so that we can use JavaScript to write functions for Postgres and PostGIS. This entry assumes you have a working PostgreSQL v9.2+ installation. If you don’t, check out <a href="http://tecadmin.net/install-postgresql-server-on-ubuntu/#" target="_blank" rel="external">this tutorial</a>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h4 id="System-Info"><a href="#System-Info" class="headerlink" title="System Info"></a>System Info</h4><p>I’m using…</p>
<ul>
<li>OS: Ubuntu 16.04</li>
<li>PostgreSQL Server 9.5</li>
<li>PostGIS 2.2 (Not relevant for this process, as long as your version supports PL/v8)</li>
</ul>
<h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><p>Thanks to <code>apt</code> this installation is very easy! Just run:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install postgresql-9.5-plv8</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/plv8/plv8#requirement" target="_blank" rel="external">Check GitHub</a> to see if your PostgreSQL version works with PL/V8. I was able to successfully install PL/V8 for PostgreSQL 9.6 by simply tweaking the version number:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install postgresql-9.6-plv8</div></pre></td></tr></table></figure></p>
<p>After a successful installation, we’ll need to add the language to your database:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql <span class="_">-d</span> &lt;database name&gt; -c <span class="string">'CREATE EXTENSION plv8'</span></div></pre></td></tr></table></figure></p>
<p>If you use <a href="https://github.com/jashkenas/coffeescript" target="_blank" rel="external">CoffeeScript</a> and <a href="http://livescript.net/" target="_blank" rel="external">LiveScript</a>, you can use <code>plcoffee</code> and <code>plls</code> respectively in place of <code>plv8</code>.</p>
<p>Okay. PL/V8 installed? Check! Language added to the database? Check. Let’s move on to making sure it works.</p>
<p>GitHub says you can use <code>psql -c &#39;SELECT plv8_version()&#39;</code> to check your version with PL/V8 as of 2.0.0. This did not work for me because at the time of writing the the version in the apt repo is <code>1:1.4.6.ds-1</code>.</p>
<p>Another method, and perhaps a more direct one, is to 1.) define a simple function and 2.) pass it some dummy data.</p>
<p><strong>First</strong> we define a test function:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE OR REPLACE FUNCTION plv8_test(keys text[], vals text[])</div><div class="line">RETURNS text AS $$</div><div class="line">  var o = &#123;&#125;;</div><div class="line">  for(var i=0; i&lt;keys.length; i++)&#123;</div><div class="line">    o[keys[i]] = vals[i];</div><div class="line">  &#125;</div><div class="line">  return JSON.stringify(o);</div><div class="line">$$ LANGUAGE plv8 IMMUTABLE STRICT;</div></pre></td></tr></table></figure></p>
<p><strong>Second</strong> we pass it some dummy data:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> plv8_test(<span class="built_in">ARRAY</span>[<span class="string">'name'</span>, <span class="string">'age'</span>], <span class="built_in">ARRAY</span>[<span class="string">'Tom'</span>, <span class="string">'29'</span>]);</div></pre></td></tr></table></figure></p>
<p><strong>If successful,</strong> you should see this response:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">         plv8_test</div><div class="line">---------------------------</div><div class="line"> &#123;"name":"Tom","age":"29"&#125;</div><div class="line">(1 row)</div></pre></td></tr></table></figure></p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>According to <a href="http://www.postgresonline.com/journal/archives/326-Writing-PostGIS-raster-Map-Algebra-Callback-Functions-in-PLV8.html" target="_blank" rel="external">this post from Regina Obe</a>, PL/V8 is great for Map Algebra. Unfortunately, as with most posts I’ve found about the PostGIS Raster Module, fails to use a geographically relevant example of raster analysis. I attempt to remedy that with <a href="/blog/tags/raster-math-series/">this series of posts</a> on writing ST_MapAlgebra callback functions, but I’m yet to try any with PL/V8 yet.</p>
]]></content>
    
    <summary type="html">
    
      Our only goal in this post is to make sure we have installed PostgreSQL&#39;s &lt;a href=&quot;https://github.com/plv8/plv8&quot;&gt;PL/V8&lt;/a&gt;.
    
    </summary>
    
      <category term="database" scheme="https://nronnei.github.io/blog/categories/database/"/>
    
    
      <category term="postgresql" scheme="https://nronnei.github.io/blog/tags/postgresql/"/>
    
      <category term="pl/v8" scheme="https://nronnei.github.io/blog/tags/pl-v8/"/>
    
  </entry>
  
</feed>
